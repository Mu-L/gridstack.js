{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 8.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 8.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean; // native support by HTML5 drag drop, can't be switch to off actually\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let handleName = option.handle.substring(1);\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054\n    const skipMouseDown = ['input', 'textarea', 'button', 'select', 'option'];\n    const name = (e.target as HTMLElement).nodeName.toLowerCase();\n    if (skipMouseDown.find(skip => skip === name)) return true;\n    // also check for content editable\n    if ((e.target as HTMLElement).closest('[contenteditable=\"true\"]')) return true;\n\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 8.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 8.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 8.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n","/**\n * dd-manager.ts 8.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * dd-resizable-handle.ts 8.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 8.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 8.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 8.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.batchUpdate(false);\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = this.column === 1 || node.x + node.w > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      if (copy.autoPosition) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column): boolean {\n    nodeList = Utils.sort(nodeList, -1, column);\n    let found = false;\n    for (let i = 0; !found; ++i) {\n      let x = i % column;\n      let y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition && this.findEmptyPosition(node)) {\n      delete node.autoPosition; // found our slot\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n          this.findEmptyPosition(cacheNode, newNodes);\n        }\n        if (!cacheNode.autoPosition) {\n          nodes[j].x = cacheNode.x;\n          nodes[j].y = cacheNode.y;\n          nodes[j].w = cacheNode.w;\n          newNodes.push(nodes[j]);\n        }\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id ?? GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition) { delete l.x; delete l.y; l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 8.0.1\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = {...grid.opts, ...opt};\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass ? '.' + opts.itemClass : gridDefaults.removableOptions.accept,\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItem = (Utils.closestUpByClass(this.el, gridDefaults.itemClass) as GridItemHTMLElement)?.gridstackNode;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'grid-stack-instance-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(node.el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts)});\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    let list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > (this.opts.column as number))) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB)\r\n            GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach(key => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('min-height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.minHeight = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    if (!(n.w > 1)) el.removeAttribute('gs-w');\r\n    if (!(n.h > 1)) el.removeAttribute('gs-h');\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    if (n.maxW) el.removeAttribute('gs-max-w');\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    if (n.minW) el.removeAttribute('gs-min-w');\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    if (n.maxH) el.removeAttribute('gs-max-h');\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    if (n.minH) el.removeAttribute('gs-min-h');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        changedColumn = true;\r\n        this.column(this.parentGridItem.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onParentResize()\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.parentGridItem;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '8.0.1';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param root optional root which defaults to document (for shadow dom)\r\n   **/\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragInOpt, root = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    let els: HTMLElement[] = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    if (els.length) els?.forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n      if (val) delete node.noMove; else node.noMove = true;\r\n      this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n      if (val) delete node.noResize; else node.noResize = true;\r\n      this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);// @ts-ignore\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);// @ts-ignore\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this.movable(n.el, doEnable);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this.resizable(n.el, doEnable);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left -= parent.left;\r\n      top -= parent.top;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {// @ts-ignore private read only on ourself\r\n          node = this._readAttr(el);\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this._writeAttr(el, node);\r\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n          // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n          if (node.el && node.el.parentElement) {\r\n            this._prepareDragDropByNode(node);\r\n          } else {\r\n            this.engine.removeNode(node);\r\n          }\r\n          delete node.grid._isTemp;\r\n        });\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop **/\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let gridToNotify = el.gridstackNode.grid;\r\n          if (gridToNotify._gsEventHandler[event.type]) {\r\n            gridToNotify._gsEventHandler[event.type](event, target);\r\n          }\r\n          this._removeDD(el);\r\n          gridToNotify.engine.removedNodes.push(node);\r\n          gridToNotify._triggerRemoveEvent();\r\n          // break circular links and remove DOM\r\n          delete el.gridstackNode;\r\n          delete node.el;\r\n          el.remove();\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start **/\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize **/\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onParentResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   **/\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * types.ts 8.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: '.grid-stack-item' },\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** different layout options when changing # of columns,\r\n * including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n */\r\nexport type ColumnOptions = 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\n\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** id used to debug grid instance, not currently stored in DOM attributes */\r\n  id?: numberOrString;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent resizing (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents moving (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** prevents being moved by others during their (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: numberOrString;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: '.' + opts.itemClass) */\r\n  accept?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** parent constraining where item can be dragged out from (default: null = no constrain) */\r\n  // containment?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping (ex: 'clone' or your own method) */\r\n  helper?: string | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\r\n * utils.ts 8.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        const el = root.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return root.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return root.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (!el) { el = root.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(324);\n"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","disabled","DDBaseImplement","el","option","handleName","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","forDestroy","removeEventListener","add","dragTimeout","window","clearTimeout","dragging","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","name","target","nodeName","toLowerCase","find","skip","closest","dragElement","dropElement","document","touchmove","touchend","preventDefault","activeElement","blur","_callDrag","ev","Utils","initEvent","type","drag","ui","s","_dragFollow","pauseDrag","pause","Number","isInteger","setTimeout","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","parentElement","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","dragElementOriginStyle","DDDraggable","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDDroppable","init","DDElement","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","els","create","hosts","getElements","length","list","filter","d","DDGridStack","host","direction","moving","dir","_init","DDResizableHandle","prefix","userSelect","_triggerEvent","newRect","originalRect","scrolled","rect","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","round","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","min","max","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","DDTouch","touchHandled","pointerLeaveTimeout","wasDragging","releasePointerCapture","pointerId","addedNodes","removedNodes","column","maxRow","_float","float","nodes","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","w","h","didMove","newOpt","pack","moved","locked","moveNode","copyPos","undefined","skip2","n","isIntercepted","collideAll","directionCollideCoverage","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","cacheRects","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","autoPosition","addNode","val","sort","_updating","_orig","newY","prepareNode","resizing","_id","GridStackEngine","_idSeq","defaults","noResize","noMove","sanitizeMinMax","isNaN","nodeBoundFix","before","maxW","maxH","minW","minH","_inColumnResize","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","cleanNodes","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","removeAll","_layouts","moveNodeCheck","clonedNode","changedPosConstrain","clone","canMove","getRow","c","willItFit","_willFitPos","cleanupNode","content","p","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","reduce","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","layout","wl","l","removeInternalForSave","layoutsNodesChange","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","clear","index","dd","_gsEventHandler","_extraDragRow","minRow","rowAttr","toNumber","anyOpts","oneColumnSize","_alwaysShowResizeHandle","cloneDeep","gridDefaults","staticGrid","toBool","handleClass","removableOptions","itemClass","animate","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","rtl","parentGridItem","closestUpByClass","subGrid","_isAutoCellHeight","cellHeight","cellHeightUnit","_styleSheetClass","_setStaticClass","engineClass","GridStack","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","children","load","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","initAll","selector","grids","getGridElements","addGrid","addRemoveCB","doc","implementation","createHTMLDocument","innerHTML","class","registerEngine","_placeholder","placeholderChild","className","placeholderText","placeholderClass","placeholder","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","_updateContainerHeight","subGridOpts","_ignoreLayoutsNodeChange","_triggerAddEvent","_triggerChangeEvent","ops","nodeToAdd","saveContent","subGridTemplate","makeWidget","autoColumn","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","margin","origShow","removeInternalAndSame","addRemove","items","prevCB","removed","id","item","_triggerRemoveEvent","getCellHeight","forcePixel","offsetHeight","rows","parseInt","marginDiff","cellWidth","data","parseHeight","unit","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","Array","from","offAll","setStatic","parentNode","removeAttribute","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","documentElement","relativeLeft","relativeTop","columnWidth","rowHeight","getElement","noData","detail","log","doAnimate","updateClass","recurse","warn","m","k","changed","ddChanged","marginUnit","getMargin","elements","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","styleInHead","createStylesheet","nonce","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","hasOwnProperty","classes","onParentResize","changedColumn","oneColumn","cellHeightThrottle","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","getDD","setupDragIn","dragInOptions","dragInDefaultOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","gridToNotify","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","distance","scroll","updateScrollPosition","prev","extra","updateScrollResize","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","apply","args","prototype","info","oldAttr","getElementById","querySelectorAll","x0","x1","y0","y1","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","Boolean","Error","parseFloat","sources","source","doMinMax","removeEl","func","delay","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","ctrlKey","altKey","shiftKey","metaKey","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}