{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","this","_disabled","event","callback","eventName","disabled","DDDraggable","DDBaseImplement","el","option","super","className","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","enable","on","off","addEventListener","isTouch","touchstart","pointerdown","remove","add","forDestroy","disable","removeEventListener","dragging","mouseDownEvent","helper","destroy","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","target","parentElement","dragElement","dropElement","document","touchmove","touchend","preventDefault","s","_dragFollow","ev","Utils","initEvent","type","drag","ui","triggerEvent","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","parentNode","dragElementOriginStyle","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","setTimeout","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","window","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDElement","ddDraggable","indexOf","ddResizable","updateOption","DDResizable","DDGridStack","dd","value","_getDDElements","dEl","cleanResizable","setupResizable","handles","getAttribute","resizable","autoHide","alwaysShowResizeHandle","resize","cleanDraggable","setupDraggable","_accept","cleanDroppable","setupDroppable","name","els","create","hosts","getElements","length","list","init","filter","d","_itemRemoving","undefined","GridStack","prototype","_setupAcceptWidget","staticGrid","acceptWidgets","removable","droppable","cellHeight","cellWidth","onDrag","_temporaryRemoved","max","round","autoPosition","engine","nodeBoundFix","willItFit","_willFitPos","copyPos","_onStartMoving","_dragOrResize","subGrid","canAccept","selector","maxRow","n","w","h","minW","minH","_leave","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","_initDD","wasAdded","placeholder","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","_removeDD","removePositioningStyles","_writeAttr","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","_prepareDragDropByNode","removeNode","_setupRemoveDrop","trashEl","isDroppable","removableOptions","setupDragIn","_dragIn","_dragInOptions","dragIn","dragInOptions","isDraggable","noMove","disableDrag","noResize","disableResize","onStartMoving","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","mLeft","mRight","mTop","mBottom","mHeight","mWidth","min","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","rect","moveNodeCheck","_skipDown","onParentResize","movable","val","enableMove","enableResize","_triggerEvent","doEnable","nodes","DDResizableHandle","host","direction","moving","dir","_init","prefix","userSelect","newRect","originalRect","scrolled","temporalRect","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","oWidth","oHeight","maxWidth","Number","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","containmentEl","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","touchHandled","pointerLeaveTimeout","clearTimeout","wasDragging","releasePointerCapture","pointerId","GridStackEngine","column","_float","float","onChange","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","nn","_hasLocked","opt","sortNodes","nested","swap","area","_useEntireRowArea","skip","didMove","newOpt","pack","moved","locked","moveNode","skip2","find","isIntercepted","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","batchUpdate","copyNodes","sort","_updating","newY","_id","_idSeq","defaults","isNaN","before","_inColumnResize","cacheOneLayout","samePos","verify","dirtyNodes","concat","getDirtyNodes","some","triggerAddEvent","dup","prepareNode","_removeDOM","floor","box","_fixCollisions","removeDOM","_layouts","changedPosConstrain","clonedNode","clone","canMove","c","content","prevPos","collideAll","needToMove","collideCoverage","reduce","saveElement","len","layout","wl","l","ratio","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","scale","clear","copy","index","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","oneColumnSize","animate","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","anyOpts","_alwaysShowResizeHandle","cloneDeep","toBool","_styleSheetClass","random","toFixed","_initMargin","_widthOrContainer","_prevColumn","getColumn","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","engineClass","cbNodes","_updateStyles","elements","getGridItems","parseInt","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","doc","implementation","createHTMLDocument","innerHTML","class","children","load","_placeholder","placeholderChild","arguments","warn","id","addWidget","domAttr","_insertNotAppend","prepend","autoColumn","ops","addGrid","_autoColumn","saveContent","saveGridOpt","save","sub","origShow","removeInternalAndSame","addAndRemove","items","_ignoreLayoutsNodeChange","removed","removeWidget","item","update","forcePixel","rows","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","compact","domNodes","oldColumn","updateNodeWidths","Array","from","setStatic","removeAll","_removeStylesheet","removeAttribute","useDocRelative","containerPos","documentElement","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","noData","detail","log","doAnimate","updateClass","m","k","changed","ddChanged","layoutsNodesChange","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","changedColumn","oneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","args","apply","info","oldAttr","querySelectorAll","getElementById","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","doMinMax","func","delay","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"gridstack-all.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 6.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 6.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean; // native support by HTML5 drag drop, can't be switch to off actually\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    let className = this.option.handle.substring(1);\n    let el = e.target as HTMLElement;\n    while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    if (!el) return;\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n      if (this.option.drag) {\n        this.option.drag(ev, this.ui());\n      }\n      this.triggerEvent('drag', ev);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault();\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none';\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 6.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { GridHTMLElement } from './gridstack';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop()) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 6.0.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 6.0.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack } from './gridstack';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  static get(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.opts._isNested && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 31k (41k -> 72k)\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(this: GridStack): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n    dd.droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let parent = this.el.getBoundingClientRect();\r\n    let {top, left} = helper.getBoundingClientRect();\r\n    left -= parent.left;\r\n    top -= parent.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          dd.off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  dd.droppable(this.el, {\r\n    accept: (el: GridItemHTMLElement) => {\r\n      let node: GridStackNode = el.gridstackNode;\r\n      // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n      if (node?.grid === this) return true;\r\n      if (!this.opts.acceptWidgets) return false;\r\n      // prevent deeper nesting until rest of 992 can be fixed\r\n      if (node?.subGrid) return false;\r\n      // check for accept method or class matching\r\n      let canAccept = true;\r\n      if (typeof this.opts.acceptWidgets === 'function') {\r\n        canAccept = this.opts.acceptWidgets(el);\r\n      } else {\r\n        let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n        canAccept = el.matches(selector);\r\n      }\r\n      // finally check to make sure we actually have space left #1571\r\n      if (canAccept && node && this.opts.maxRow) {\r\n        let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n        canAccept = this.engine.willItFit(n);\r\n      }\r\n      return canAccept;\r\n    }\r\n  })\r\n  /**\r\n   * entering our grid area\r\n   */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node?.grid === this && !node._temporaryRemoved) {\r\n      // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n      // console.log('dropover without leave'); // TEST\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {// @ts-ignore private read only on ourself\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n      // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n      // console.log('dropover cloning node'); // TEST\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n      node._isExternal =  // DOM needs to be re-parented on a drop\r\n      node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      dd.on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n  /**\r\n   * Leaving our grid area...\r\n   */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      if (!node) return false;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n  /**\r\n   * end - releasing the mouse\r\n   */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node?.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // console.log('drop delete _gridstackNodeOrig') // TEST\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      dd.off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        this._removeDD(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n      // @ts-ignore\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);// @ts-ignore\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);// @ts-ignore\r\n      this._triggerAddEvent();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n      // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(this: GridStack): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!dd.isDroppable(trashEl)) {\r\n      dd.droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(this: GridStack, _dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  let dragIn: string;\r\n  let dragInOptions: DDDragInOpt;\r\n  const dragInDefaultOptions: DDDragInOpt = {\r\n    handle: '.grid-stack-item-content',\r\n    appendTo: 'body',\r\n    // revert: 'invalid',\r\n    // scroll: false,\r\n  };\r\n\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(this: GridStack, node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        this._removeDD(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        Utils.removePositioningStyles(target);\r\n        if (node._temporaryRemoved) {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.copyPos(node, node._orig);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        } else {\r\n          // move to new placeholder location\r\n          this._writePosAttr(target, node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n      // @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    dd.draggable(el, 'disable');\r\n    el.classList.add('ui-draggable-disabled');\r\n  } else {\r\n    dd.draggable(el, 'enable');\r\n    el.classList.remove('ui-draggable-disabled');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    dd.resizable(el, 'disable');\r\n    el.classList.add('ui-resizable-disabled');\r\n  } else {\r\n    dd.resizable(el, 'enable');\r\n    el.classList.remove('ui-resizable-disabled');\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n  // @ts-ignore\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // console.log('_onStartMoving placeholder') // TEST\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // console.log('engine.addNode x=' + node.x); // TEST\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n  if (event.type === 'resizestart') {\r\n    dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(this: GridStack, el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // console.log('leave delete _gridstackNodeOrig') // TEST\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n  let mLeft = this.opts.marginLeft as number,\r\n    mRight = this.opts.marginRight as number,\r\n    mTop = this.opts.marginTop as number,\r\n    mBottom = this.opts.marginBottom as number;\r\n\r\n  // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n  let mHeight = Math.round(cellHeight * 0.1),\r\n    mWidth = Math.round(cellWidth * 0.1);\r\n  mLeft = Math.min(mLeft, mWidth);\r\n  mRight = Math.min(mRight, mWidth);\r\n  mTop = Math.min(mTop, mHeight);\r\n  mBottom = Math.min(mBottom, mHeight);\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }// @ts-ignore\r\n      this._extraDragRow = extra;// @ts-ignore\r\n    } else this._extraDragRow = 0;// @ts-ignore\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + mLeft;\r\n    let top = ui.position.top + mTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + mLeft,\r\n    y: ui.position.top + mTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n    this._extraDragRow = 0;// @ts-ignore\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);// @ts-ignore\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);// @ts-ignore\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** removes any drag&drop present (called during destroy) */\r\nGridStack.prototype._removeDD = function(this: GridStack, el: GridItemHTMLElement): GridStack {\r\n  dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n  if (el.gridstackNode) {\r\n    delete el.gridstackNode._initDD; // reset our DD init flag\r\n  }\r\n  return this;\r\n}\r\n\r\n","/**\n * dd-manager.ts 6.0.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n}\n","/**\n * dd-resizable-handle.ts 6.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent) {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent) {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent) {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 6.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _mouseOver(e: Event) {\n    this.el.classList.remove('ui-resizable-autohide');\n    e.stopPropagation();\n  }\n\n  /** @internal */\n  protected _mouseOut(e: Event) {\n    this.el.classList.add('ui-resizable-autohide');\n    e.stopPropagation();\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 6.0.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = ( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent) {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent) {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled)  return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent) {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent) {\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent) {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent) {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 6.0.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore ack (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  protected static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return collide;\n  }\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.batchUpdate(false);\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    if (node.w > this.column) {\n      // if user loaded a larger than allowed widget for current # of columns,\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\n      // IFF we're not in the middle of column resizing!\n      if (this.column < 12 && !this._inColumnResize) {\n        node.w = Math.min(12, node.w);\n        this.cacheOneLayout(node, 12);\n      }\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition) {\n      this.sortNodes();\n\n      for (let i = 0;; ++i) {\n        let x = i % this.column;\n        let y = Math.floor(i / this.column);\n        if (x + node.w > this.column) {\n          continue;\n        }\n        let box = {x, y, w: node.w, h: node.h};\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n          node.x = x;\n          node.y = y;\n          delete node.autoPosition; // found our slot\n          break;\n        }\n      }\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // make sure we are still valid size\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // turns out we can't grow, then see if we can swap instead (ex: full grid) if we're not resizing\n    if (!canMove && !o.resizing) {\n      let collide = this.collide(node, o);\n      if (collide && this.swap(node, collide)) {\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    if (o.pack === undefined) o.pack = true;\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      // now check to make sure we actually collided over 50% surface area while dragging\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      // delete internals\n      for (let key in w) { if (key[0] === '_' || w[key] === null || w[key] === undefined ) delete w[key]; }\n      delete w.grid;\n      if (!saveElement) delete w.el;\n      // delete default values (will be re-created on read)\n      if (!w.autoPosition) delete w.autoPosition;\n      if (!w.noResize) delete w.noResize;\n      if (!w.noMove) delete w.noMove;\n      if (!w.locked) delete w.locked;\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n    return this;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 6.0.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  oneColumnSize: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: 'mobile',\r\n  resizable: {\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false,\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine) {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as any)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(GridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || GridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || GridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || GridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || GridDefaults.staticGrid,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || GridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass ? '.' + opts.itemClass : GridDefaults.removableOptions.accept,\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      parentGridItemEl.classList.add('grid-stack-nested');\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== GridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.getColumn()\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // check if nested grid definition is present\r\n    if (node.subGrid && !(node.subGrid as GridStack).el) { // see if there is a sub-grid to create too\r\n      // if column special case it set, remember that flag and set default\r\n      let autoColumn: boolean;\r\n      let ops = node.subGrid as GridStackOptions;\r\n      if (ops.column === 'auto') {\r\n        ops.column = node.w;\r\n        ops.disableOneColumnMode = true; // driven by parent\r\n        autoColumn = true;\r\n      }\r\n      let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n      node.subGrid = GridStack.addGrid(content, node.subGrid as GridStackOptions);\r\n      if (autoColumn) { node.subGrid._autoColumn = true; }\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = (o as any)._alwaysShowResizeHandle;\r\n      delete (o as any)._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.opts._isNested) {\r\n      if (this.opts.column !== this.opts._isNested.w) {\r\n        changedColumn = true;\r\n        this.column(this.opts._isNested.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '6.0.0';\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in dd-gridstack.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in dd-gridstack.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  public _removeDD(el: GridItemHTMLElement): GridStack { return this }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n\r\n/*\r\n * and include D&D by default, which override some methods here\r\n * TODO: while we can generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nexport * from './dd-gridstack';\r\n","/**\r\n * utils.ts 6.0.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['_isNested', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = document.querySelector(parent as string);\r\n    } else {\r\n      parentNode = parent as HTMLElement;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(270);\n"],"sourceRoot":""}