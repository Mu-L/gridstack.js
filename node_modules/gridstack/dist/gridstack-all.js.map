{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/runtime/define property getters","webpack://GridStack/webpack/runtime/hasOwnProperty shorthand","webpack://GridStack/./src/utils.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/dd-gridstack.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * utils.ts 9.2.2\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        const el = doc.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n      if (!els.length) return null;\r\n      if (doc && els[0] === '#') {\r\n        return doc.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        return doc.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (doc && !el) { el = doc.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** true if we should resize to content */\r\n  static shouldSizeToContent(n: GridStackNode | undefined): boolean {\r\n    return n?.grid && (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false));\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir: 1 | -1 = 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n    else\r\n      return nodes.sort((b, a) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      if (val === 'auto') h = 0;\r\n      else {\r\n        let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n        if (!match) {\r\n          throw new Error('Invalid height');\r\n        }\r\n        unit = match[2] || 'px';\r\n        h = parseFloat(match[1]);\r\n      }\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n  //   while (el) {\r\n  //     if (el.classList.contains(name)) return el;\r\n  //     el = el.parentElement\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","/**\n * gridstack-engine.ts 9.2.2\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn, CompactOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true, doPack = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.cleanNodes();\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      if (doPack) this._packNodes();\n      this._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    let overMax = 0.5; // need >50%\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    if (doSort) this.sortNodes();\n    const wasBatch = this.batchMode;\n    if (!wasBatch) this.batchUpdate();\n    const wasColumnResize = this._inColumnResize;\n    if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach((n, index, list) => {\n      let after: GridStackNode;\n      if (!n.locked) {\n        n.autoPosition = true;\n        if (layout === 'list' && index) after = list[index - 1];\n      }\n      this.addNode(n, false, after); // 'false' for add event trigger\n    });\n    if (!wasColumnResize) delete this._inColumnResize;\n    if (!wasBatch) this.batchUpdate(false);\n    return this;\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir: 1 | -1 = 1, column = this.column): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns,\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      if (copy.autoPosition || copy.x === undefined) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w || 1);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column, after?: GridStackNode): boolean {\n    let start = after ? after.y * column + (after.x + after.w) : 0;\n    let found = false;\n    for (let i = start; !found; ++i) {\n      let x = i % column;\n      let y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        if (node.x !== x || node.y !== y) node._dirty = true;\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false, after?: GridStackNode): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    let skipCollision: boolean;\n    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n      delete node.autoPosition; // found our slot\n      skipCollision = true;\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    if (!skipCollision) this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n._id === node._id)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n._id !== node._id);\n    if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n    this._notify([node]);\n    return this;\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n._id === node._id) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n    // (case where widget was somehow added past our max #2449)\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      // use layout info fields instead if set\n      let w: GridStackNode = {...n, ...(wl || {})};\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (n.y >= 0 && node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public columnChanged(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // simpler shortcuts layouts\n    const doCompact = layout === 'compact' || layout === 'list';\n    if (doCompact) {\n      this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n    }\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n    if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n    \n    // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    if (column > prevColumn && this._layouts) {\n      const cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            if (!doCompact && !cacheNode.autoPosition) {\n              n.x = cacheNode.x ?? n.x;\n              n.y = cacheNode.y ?? n.y;\n            }\n            n.w = cacheNode.w ?? n.w;\n            if (cacheNode.x == undefined || cacheNode.y === undefined) n.autoPosition = true;\n          }\n        });\n      }\n\n      // if we found cache re-use those nodes that are still current\n      cacheNodes.forEach(cacheNode => {\n        let j = nodes.findIndex(n => n._id === cacheNode._id);\n        if (j !== -1) {\n          const n = nodes[j];\n          // still current, use cache info positions\n          if (doCompact) {\n            n.w = cacheNode.w; // only w is used, and don't trim the list\n            return;\n          }\n          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n            this.findEmptyPosition(cacheNode, newNodes);\n          }\n          if (!cacheNode.autoPosition) {\n            n.x = cacheNode.x ?? n.x;\n            n.y = cacheNode.y ?? n.y;\n            n.w = cacheNode.w ?? n.w;\n            newNodes.push(n);\n          }\n          nodes.splice(j, 1);\n        }\n      });\n    }\n\n    // much simpler layout that just compacts\n    if (doCompact) {\n      this.compact(layout, false);\n    } else {\n      // ...and add any extra non-cached ones\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, prevColumn, newNodes, nodes);\n        } else if (!domOrder) {\n          let ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n          let move = (layout === 'move' || layout === 'moveScale');\n          let scale = (layout === 'scale' || layout === 'moveScale');\n          nodes.forEach(node => {\n            // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n            node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n            node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      }\n\n      // finally re-layout them in reverse order (to get correct placement)\n      if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n      this._inColumnResize = true; // prevent cache update\n      this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n      newNodes.forEach(node => {\n        this.addNode(node, false); // 'false' for add event trigger\n        delete node._orig; // make sure the commit doesn't try to restore things back to original\n      });\n    }\n    \n    this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n    this.batchUpdate(false, !doCompact);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id ?? GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition || n.x === undefined) { delete l.x; delete l.y; if (n.autoPosition) l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n  public removeNodeFromLayoutCache(n: GridStackNode) {\n    if (!this._layouts) {\n      return;\n    }\n    for (let i = 0; i < this._layouts.length; i++) {\n      let index = this.findCacheLayout(n, i);\n      if (index !== -1) {\n        this._layouts[i].splice(index, 1);\n      }\n    }\n  }\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/**\r\n * types.ts 9.2.2\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable'},\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n  //removable\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** \r\n * different layout options when changing # of columns, including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n * Options are:\r\n * 'list' - treat items as sorted list, keeping items (un-sized unless too big for column count) sequentially reflowing them\r\n * 'compact' - similar to list, but using compact() method which will possibly re-order items if an empty slots are available due to a larger item needing to be pushed to next row\r\n * 'moveScale' - will scale and move items by the ratio new newColumnCount / oldColumnCount\r\n * 'move' | 'scale' - will only size or move items\r\n * 'none' will leave items unchanged, unless they don't fit in column count\r\n */\r\nexport type ColumnOptions = 'list' | 'compact' | 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\nexport type CompactOptions = 'list' | 'compact';\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\nexport type ResizeToContentFcn = (el: GridItemHTMLElement, useAttr?: boolean) => void;\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /** set to true if all grid items (by default, but item can also override) height should be based on content size instead of WidgetItem.h to avoid v-scrollbars.\r\n   Note: this is still row based, not pixels, so it will use ceil(getBoundingClientRect().height / getCellHeight()) */\r\n   sizeToContent?: boolean;\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent direct resizing by the user (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents direct moving by the user (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** same as noMove+noResize but also prevents being pushed by other widgets or api (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: string;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** local (vs grid) override - see GridStackOptions. \r\n   * Note: This also allow you to set a maximum h value (but user changeable during normal resizing) to prevent unlimited content from taking too much space (get scrollbar) */\r\n  sizeToContent?: boolean | number;\r\n  /** local override of GridStack.resizeToContentParent that specify the class to use for the parent (actual) vs child (wanted) height */\r\n  resizeToContentParent?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: opts.itemClass) */\r\n  accept?: string;\r\n  /** class that cannot be removed (default: 'grid-stack-non-removable') */\r\n  decline?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** prevents dragging from starting on specified elements, listed as comma separated selectors (eg: '.no-drag'). default built in is 'input,textarea,button,select,option' */\r\n  cancel?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping: 'clone' or your own method */\r\n  helper?: 'clone' | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\n * dd-manager.ts 9.2.2\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * touch.ts 9.2.2\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  if (e.pointerType === 'mouse') return;\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  if (e.pointerType === 'mouse') return;\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  if (e.pointerType === 'mouse') return;\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * dd-resizable-handle.ts 9.2.2\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-base-impl.ts 9.2.2\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-resizable.ts 9.2.2\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-draggable.ts 9.2.2\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: 'clone' | HTMLElement | ((event: Event) => HTMLElement);\n  cancel?: string;\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n\n    // get the element that is actually supposed to be dragged by\n    let handleName = option.handle.substring(1);\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n    if ((e.target as HTMLElement).closest(skipMouseDown)) return true;\n    if (this.option.cancel) {\n      if ((e.target as HTMLElement).closest(this.option.cancel)) return true;\n    }\n\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 9.2.2\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.classList.contains(this.option.accept as string) || el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 9.2.2\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 9.2.2\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn, CompactOptions, GridStackMoveOpts, ResizeToContentFcn } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | 'resizecontent' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = {...grid.opts, ...opt};\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /** callback to use for resizeToContent instead of the built in one */\r\n  public static resizeToContentCB?: ResizeToContentFcn;\r\n  /** parent class for sizing content. defaults to '.grid-stack-item-content' */\r\n  public static resizeToContentParent = '.grid-stack-item-content';\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n  protected resizeObserver: ResizeObserver;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _sizeThrottle: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected prevWidth: number;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n  private _skipInitialResize: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass || gridDefaults.removableOptions.accept,\r\n        decline: gridDefaults.removableOptions.decline\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    const grandParent: GridItemHTMLElement = this.el.parentElement?.parentElement;\r\n    let parentGridItem = grandParent?.classList.contains(gridDefaults.itemClass) ? grandParent.gridstackNode : undefined;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    this.el.classList.add('gs-' + this.opts.column);\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: GridItemHTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\r\n    node = el.gridstackNode;\r\n    if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id)) return el;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    this.makeWidget(el, options);\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts)});\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    let list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   */\r\n  public load(layout: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else force widget same order\r\n    const haveCoord = layout.some(w => w.x !== undefined || w.y !== undefined);\r\n    let items = haveCoord ? Utils.sort(layout, -1, this._prevColumn || this.getColumn()) : layout;\r\n    this._insertNotAppend = haveCoord; // if we create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => ((n.x || 0) + n.w) > (this.opts.column as number))) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB)\r\n            GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets - starting with an empty list to reduce collision and add no-coord ones at next available spot\r\n    let copyNodes = this.engine.nodes;\r\n    this.engine.nodes = [];\r\n    items.forEach(w => {\r\n      let item = (w.id !== undefined) ? copyNodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\r\n        if (w.autoPosition || w.x === undefined || w.y === undefined) {\r\n          w.w = w.w || item.w;\r\n          w.h = w.h || item.h;\r\n          this.engine.findEmptyPosition(w);\r\n        }\r\n        this.engine.nodes.push(item); // now back to current list...\r\n        this.update(item.el, w);\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._updateContainerHeight();\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    this.doContentResize(false, true); // no anim wait, but use attributes since we only change row height\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * re-layout grid items to reclaim any empty space. Options are:\r\n   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\r\n   * 'compact' might re-order items to fill any empty space\r\n   * \r\n   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\r\n   */\r\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStack {\r\n    this.engine.compact(layout, doSort);\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (!column || column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('gs-' + oldColumn);\r\n    this.el.classList.add('gs-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.columnChanged(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    this.doContentResize();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   * @param options widget definition to use instead of reading attributes or using default sizing values\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\r\n   * grid.el.appendChild('<div id=\"2\"></div>');\r\n   * grid.makeWidget('1');\r\n   * grid.makeWidget('2', {w:2, content: 'hello'});\r\n   */\r\n  public makeWidget(els: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true, options);\r\n    const node = el.gridstackNode;\r\n\r\n    this._updateContainerHeight();\r\n\r\n    this.doContentResize(false, false, node);\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\r\n      || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach(key => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      if (GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, node, false, false);\r\n      }\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (!!this.opts.staticGrid === val) return this;\r\n    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el?.gridstackNode;\r\n      if (!n) return;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content !== undefined) {\r\n        const itemContent = el.querySelector('.grid-stack-item-content');\r\n        if (!itemContent || itemContent.innerHTML === w.content) return;\r\n        itemContent.innerHTML = w.content;\r\n        // restore any sub-grid back\r\n        if (n.subGrid?.el) {\r\n          itemContent.appendChild(n.subGrid.el);\r\n          if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget\r\n      if (m) this.moveNode(n, m);\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  private moveNode(n: GridStackNode, m: GridStackMoveOpts) {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(n)\r\n      .moveNode(n, m);\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n    this.engine.endUpdate();\r\n  }\r\n\r\n  /** \r\n   * Updates widget height to match the content height to avoid v-scrollbar or dead space.\r\n   * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\r\n   * useAttrSize set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\r\n   */\r\n  public resizeToContent(el: GridItemHTMLElement, useAttrSize = false) {\r\n    if (!el) return;\r\n    el.classList.remove('size-to-content-max');\r\n    if (!el.clientHeight) return; // 0 when hidden, skip\r\n    let n = el.gridstackNode;\r\n    if (!n) return;\r\n    const grid = n.grid;\r\n    if (!grid) return;\r\n    if (el.parentElement !== grid.el) return; // skip if we are not inside a grid\r\n    const cell = grid.getCellHeight();\r\n    if (!cell) return;\r\n    let height = useAttrSize && n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\r\n    let item: Element;\r\n    if (n.resizeToContentParent) item = el.querySelector(n.resizeToContentParent);\r\n    if (!item) item = el.querySelector(GridStack.resizeToContentParent);\r\n    if (!item) return;\r\n    const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\r\n    const itemH = useAttrSize && n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\r\n    let wantedH: number;\r\n    if (n.subGrid) {\r\n      // sub-grid - use their actual row count * their cell height\r\n      wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight();\r\n    } else {\r\n      // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\r\n      const child = item.firstElementChild;\r\n      if (!child) { console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`); return; }  \r\n      wantedH = child.getBoundingClientRect().height || itemH;\r\n    }\r\n    if (itemH === wantedH) return;\r\n    height += wantedH - itemH;\r\n    let h = Math.ceil(height / cell);\r\n    // check for min/max and special sizing\r\n    const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent as number : 0;\r\n    if (softMax && h > softMax) {\r\n      h = softMax;\r\n      el.classList.add('size-to-content-max');  // get v-scroll back\r\n    }\r\n    if (n.minH && h < n.minH) h = n.minH;\r\n    else if (n.maxH && h > n.maxH) h = n.maxH;\r\n    if (h !== n.h) {\r\n      grid._ignoreLayoutsNodeChange = true;\r\n      grid.moveNode(n, {h});\r\n      delete grid._ignoreLayoutsNodeChange;\r\n    }\r\n  }\r\n\r\n  /** call the user resize (so they can do extra work) else our build in version */\r\n  protected resizeToContentCheck(el: GridItemHTMLElement, useAttr = false) {\r\n    if (GridStack.resizeToContentCB) GridStack.resizeToContentCB(el, useAttr);\r\n    else this.resizeToContent(el, useAttr);\r\n  }\r\n  \r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i+1}\"]`, `height: ${getHeight(i+1)}`); // start at 2\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    const parent = this.parentGridItem;\r\n    let row = this.getRow() + this._extraDragRow; // this checks for minRow already\r\n    const cellHeight = this.opts.cellHeight as number;\r\n    const unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n\r\n    // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\r\n    if (!parent) {\r\n      const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\r\n      if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\r\n        const minRow = Math.floor(cssMinHeight.h / cellHeight);\r\n        if (row < minRow) {\r\n          row = minRow;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    this.el.style.removeProperty('min-height');\r\n    this.el.style.removeProperty('height');\r\n    if (row) {\r\n      // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\r\n      this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\r\n    }\r\n\r\n    // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\r\n    if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {\r\n      parent.grid.resizeToContentCheck(parent.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    if (Utils.shouldSizeToContent(node)) el.classList.add('size-to-content');\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement, clearDefaultAttr = true): GridStackWidget {\r\n    let n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n\r\n    // v8.x optimization to reduce un-needed attr that don't render or are default CSS\r\n    if (clearDefaultAttr) {\r\n      if (n.w === 1) el.removeAttribute('gs-w');\r\n      if (n.h === 1) el.removeAttribute('gs-h');\r\n      if (n.maxW) el.removeAttribute('gs-max-w');\r\n      if (n.minW) el.removeAttribute('gs-min-w');\r\n      if (n.maxH) el.removeAttribute('gs-max-h');\r\n      if (n.minH) el.removeAttribute('gs-min-h');\r\n    }\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\r\n   * or `sizeToContent` gridItem options.\r\n   */\r\n  public onResize(): GridStack {\r\n    if (!this.el?.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    if (this.prevWidth === this.el.clientWidth) return; // no-op\r\n    this.prevWidth = this.el.clientWidth\r\n    // console.log('onResize ', this.el.clientWidth);\r\n\r\n    this.batchUpdate();\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    let columnChanged = false;\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        this.column(this.parentGridItem.w, 'none');\r\n        columnChanged = true;\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize ||\r\n      (this.opts.column === 1 && !this._prevColumn);\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        // if (this.opts.animate) this.setAnimation(false); // 1 <-> 12 is too radical, turn off animation and we need it for sizeToContent\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        // if (this.opts.animate) setTimeout(() => this.setAnimation(true));\r\n        columnChanged = true;\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // update any nested grids, or items size\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onResize()\r\n    });\r\n\r\n    if (!this._skipInitialResize) this.doContentResize(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\r\n    delete this._skipInitialResize;\r\n\r\n    this.batchUpdate(false);\r\n\r\n    return this;\r\n  }\r\n\r\n  private doContentResize(delay = true, useAttr = false, n: GridStackNode = undefined) {\r\n    // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\r\n    // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\r\n    setTimeout(() =>  {\r\n       if (n) {\r\n        if (Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\r\n       } else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\r\n        const nodes = [...this.engine.nodes]; // in case order changes while resizing one\r\n        this.batchUpdate();\r\n        nodes.forEach(n => {\r\n          if (Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\r\n        });\r\n        this.batchUpdate(false);\r\n      }\r\n      // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\r\n      if (this._gsEventHandler['resizecontent']) this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\r\n    }, delay ? 300 + 10 : 0);\r\n  }\r\n\r\n  /** add or remove the grid element size event handler */\r\n  protected _updateResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    // or supporting new sizeToContent option.\r\n    const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || !this.opts.disableOneColumnMode\r\n      || this.engine.nodes.find(n => n.sizeToContent));\r\n\r\n    if (!forceRemove && trackSize && !this.resizeObserver) {\r\n      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\r\n      this.resizeObserver = new ResizeObserver(entries => this._sizeThrottle());\r\n      this.resizeObserver.observe(this.el);\r\n      this._skipInitialResize = true; // makeWidget will originally have called on startup\r\n    } else if ((forceRemove || !trackSize) && this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n      delete this.resizeObserver;\r\n      delete this._sizeThrottle;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '9.2.2';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\r\n   */\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragInOpt, root: HTMLElement | Document = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    let els: HTMLElement[] = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    if (els.length) els?.forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noMove : n.noMove = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noResize : n.noResize = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left -= parent.left;\r\n      top -= parent.top;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {\r\n          node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          delete node.x;\r\n          delete node.y;\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n          node._isExternal =  // DOM needs to be re-parented on a drop\r\n          node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removeNodeFromLayoutCache(origNode);\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this._writeAttr(el, node);\r\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n          // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n          if (node.el && node.el.parentElement) {\r\n            this._prepareDragDropByNode(node);\r\n          } else {\r\n            this.engine.removeNode(node);\r\n          }\r\n          delete node.grid._isTemp;\r\n        });\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline)) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop */\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let grid = el.gridstackNode.grid;\r\n          if (grid._gsEventHandler[event.type]) {\r\n            grid._gsEventHandler[event.type](event, target);\r\n          }\r\n          grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\r\n          grid.removeWidget(el, true, true);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n\r\n        if (event.type === 'resizestop') {\r\n          if (Number.isInteger(node.sizeToContent)) node.sizeToContent = node.h; // new soft limit\r\n          this.doContentResize(false, true, node); // no amin wait as will use the actual sized coordinate attr\r\n        }\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start */\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize */\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   */\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * dd-gridstack.ts 9.2.2\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Utils","static","els","document","doc","undefined","isNaN","el","getElementById","list","querySelectorAll","length","Array","from","substring","querySelector","n","grid","sizeToContent","opts","a","b","y","h","x","w","isIntercepted","x0","x1","y0","y1","nodes","dir","column","reduce","col","Math","max","sort","id","parent","options","style","createElement","nonce","setAttribute","styleSheet","cssText","appendChild","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","parentNode","remove","selector","rules","addRule","insertRule","v","toLowerCase","Boolean","value","Number","val","unit","match","Error","parseFloat","target","sources","forEach","source","this","defaults","keys","doMinMax","minW","minH","maxW","maxH","node","i","removeEl","autoPosition","noResize","noMove","locked","func","delay","isWaiting","args","setTimeout","position","removeProperty","left","top","width","height","scrollingElement","documentElement","getComputedStyle","test","overflow","overflowY","getScrollElement","parentElement","distance","rect","getBoundingClientRect","innerHeightOrClientHeight","window","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","scrollTop","offsetHeight","abs","event","offsetTop","pointerPosY","clientY","scrollBy","behavior","skipFields","ret","clone","find","k","cloneDeep","cloneNode","removeAttribute","getElement","styles","s","isArray","e","info","evt","type","button","which","buttons","bubbles","cancelable","dataTransfer","p","simulatedType","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","GridStackEngine","addedNodes","removedNodes","maxRow","_float","float","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","cleanNodes","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","skip","didMove","newOpt","pack","moved","moveNode","copyPos","skip2","skipId","_id","skip2Id","collideAll","filter","directionCollideCoverage","collides","_rect","r0","r","overMax","r2","yOver","MAX_VALUE","xOver","over","min","cacheRects","right","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","addNode","_updating","_orig","newY","prepareNode","resizing","_idSeq","sanitizeMinMax","nodeBoundFix","before","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","skipCollision","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","_isAboutToRemove","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","map","canMove","getRow","gridstackNode","c","willItFit","_willFitPos","cleanupNode","content","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","removeInternalForSave","layoutsNodesChange","ratio","round","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","removeNodeFromLayoutCache","gridDefaults","alwaysShowResizeHandle","animate","auto","cellHeight","cellHeightThrottle","cellHeightUnit","draggable","handle","appendTo","scroll","itemClass","margin","marginUnit","minRow","oneColumnSize","placeholderClass","placeholderText","removableOptions","accept","decline","resizable","handles","rtl","dragInDefaultOptions","DDManager","isTouch","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","touches","preventDefault","touch","changedTouches","simulatePointerMouseEvent","touchstart","touchHandled","touchmove","touchend","pointerLeaveTimeout","clearTimeout","wasDragging","dragElement","pointerdown","pointerType","releasePointerCapture","pointerId","pointerenter","pointerleave","DDResizableHandle","constructor","host","direction","option","moving","_mouseDown","bind","_mouseMove","_mouseUp","_init","classList","add","prefix","zIndex","userSelect","addEventListener","destroy","mouseDownEvent","removeEventListener","removeChild","stopPropagation","_triggerEvent","name","DDBaseImplement","_eventRegister","disabled","_disabled","on","callback","off","enable","disable","eventName","DDResizable","super","_ui","containmentRect","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","autoHide","_setupHandlers","_removeHandlers","updateOption","updateHandles","updateAutoHide","overResizeElement","handlerDirection","handlers","split","trim","start","_resizeStart","stop","_resizeStop","_resizing","scrollY","startEvent","_setupHelper","_applyChange","ev","initEvent","_getChange","resize","_cleanHelper","elOriginStyleVal","_originStyleProp","parentOriginStylePosition","opacity","oEvent","offsetX","offsetY","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","containmentEl","DDDraggable","handleName","dragEl","contains","forDestroy","dragTimeout","dragging","helper","mouseHandled","closest","cancel","dropElement","activeElement","blur","_callDrag","drag","ui","_dragFollow","pauseDrag","pause","isInteger","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","_removeHelperStyle","drop","body","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","offset","offsetLeft","xformOffsetX","xformOffsetY","testEl","addElStyles","testElPosition","targetOffset","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","_canDrop","out","parentDrop","matches","DDElement","ddDraggable","ddResizable","setupDraggable","cleanDraggable","setupResizable","cleanResizable","setupDroppable","cleanDroppable","dd","_getDDElements","dEl","getAttribute","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","create","hosts","getElements","init","d","GridStack","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","children","load","addRemoveCB","implementation","createHTMLDocument","innerHTML","class","engineClass","placeholder","_placeholder","placeholderChild","className","_gsEventHandler","_extraDragRow","rowAttr","toNumber","_alwaysShowResizeHandle","staticGrid","toBool","handleClass","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","grandParent","parentGridItem","subGrid","_isAutoCellHeight","_styleSheetClass","_setStaticClass","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateResizeEvent","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","makeWidget","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","addGrid","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","origShow","removeInternalAndSame","addRemove","haveCoord","items","_ignoreLayoutsNodeChange","prevCB","removed","item","_updateContainerHeight","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","rows","parseInt","marginDiff","cellWidth","data","parseHeight","doContentResize","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","offAll","setStatic","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","relativeLeft","relativeTop","columnWidth","rowHeight","noData","detail","log","doAnimate","updateClass","recurse","warn","m","itemContent","styleInHead","changed","ddChanged","resizeToContent","useAttrSize","cell","resizeToContentParent","padding","itemH","wantedH","child","firstElementChild","ceil","softMax","resizeToContentCheck","useAttr","resizeToContentCB","getMargin","elements","CustomEvent","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","cssMinHeight","String","shouldSizeToContent","same","attrs","clearDefaultAttr","classes","onResize","prevWidth","oneColumn","_skipInitialResize","forceRemove","trackSize","resizeObserver","disconnect","_sizeThrottle","throttle","ResizeObserver","entries","observe","margins","dragInOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","updateScrollPosition","prev","extra","updateScrollResize","commit","Engine","GDRev"],"sourceRoot":""}